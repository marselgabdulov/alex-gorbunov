{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack:///./node_modules/@babel/runtime/helpers/esm/extends.js","webpack:///./node_modules/react-transition-group/esm/TransitionGroupContext.js","webpack:///./node_modules/react-transition-group/esm/config.js","webpack:///./node_modules/react-transition-group/esm/Transition.js","webpack:///./node_modules/react-transition-group/esm/CSSTransition.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/react-transition-group/esm/utils/ChildMapping.js","webpack:///./node_modules/react-transition-group/esm/TransitionGroup.js"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","__webpack_require__","d","__webpack_exports__","_inheritsLoose","subClass","superClass","prototype","create","constructor","__proto__","_extends","assign","arguments","hasOwnProperty","call","apply","this","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","a","createContext","config","UNMOUNTED","EXITED","ENTERING","ENTERED","Transition_Transition","_React$Component","Transition","props","context","_this","initialStatus","appear","isMounting","enter","appearStatus","unmountOnExit","mountOnEnter","state","status","nextCallback","inheritsLoose","getDerivedStateFromProps","_ref","prevState","_proto","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","exit","timeout","undefined","mounting","node","react_dom_default","findDOMNode","performEnter","performExit","setState","_this2","appearing","timeouts","enterTimeout","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExit","onExiting","onExited","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","doesNotHaveTimeoutOrListener","addEndListener","setTimeout","render","_this$props","children","childProps","objectWithoutPropertiesLoose","react_default","createElement","TransitionGroupContext","Provider","value","child","Children","only","cloneElement","Component","noop","contextType","propTypes","defaultProps","in","EXITING","esm_Transition","CSSTransition_removeClass","classes","split","forEach","c","removeClass_default","CSSTransition_CSSTransition","CSSTransition","_len","args","Array","_key","concat","appliedClasses","removeClasses","addClass","type","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","phase","className","scrollTop","addClass_default","_addClass","_this$appliedClasses$","base","done","esm_extends","_assertThisInitialized","self","ReferenceError","getChildMapping","mapFn","result","react","map","mapper","getProp","prop","getNextChildMapping","nextProps","prevChildMapping","nextChildMapping","prev","next","getValueForKey","nextKeysPending","pendingKeys","prevKey","push","childMapping","nextKey","pendingNextKey","mergeChildMappings","hasPrev","hasNext","prevChild","isLeaving","bind","values","obj","k","TransitionGroup_TransitionGroup","TransitionGroup","handleExited","contextValue","firstRender","mounted","currentChildMapping","component","childFactory"],"mappings":"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","file":"13-7c958b6ea79bef7d1cff.js","sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import React from 'react';\nexport default React.createContext(null);","export default {\n  disabled: false\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props[\"in\"]) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref[\"in\"];\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  }; // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props[\"in\"]) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n      var node = ReactDOM.findDOMNode(this);\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(node, mounting);\n      } else {\n        this.performExit(node);\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(node, mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(node);\n      });\n      return;\n    }\n\n    this.props.onEnter(node, appearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(node, appearing);\n\n      _this2.onTransitionEnd(node, enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(node, appearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit(node) {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(node);\n      });\n      return;\n    }\n\n    this.props.onExit(node);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(node);\n\n      _this3.onTransitionEnd(node, timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(node);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {\n    this.setNextCallback(handler);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      this.props.addEndListener(node, this.nextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\"]); // filter props for Transtition\n\n\n    delete childProps[\"in\"];\n    delete childProps.mountOnEnter;\n    delete childProps.unmountOnExit;\n    delete childProps.appear;\n    delete childProps.enter;\n    delete childProps.exit;\n    delete childProps.timeout;\n    delete childProps.addEndListener;\n    delete childProps.onEnter;\n    delete childProps.onEntering;\n    delete childProps.onEntered;\n    delete childProps.onExit;\n    delete childProps.onExiting;\n    delete childProps.onExited;\n\n    if (typeof children === 'function') {\n      // allows for nested Transitions\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, children(status, childProps));\n    }\n\n    var child = React.Children.only(children);\n    return (// allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, React.cloneElement(child, childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  \"in\": PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.\n   * If you want to transition on the first mount set `appear` to `true`, and the\n   * component will transition in as soon as the `<Transition>` mounts.\n   *\n   * > Note: there are no specific \"appear\" states. `appear` only adds an additional `enter` transition.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. **Note:** Timeouts are still used as a fallback if provided.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func // Name the function so it is clearer in the documentation\n\n} : {};\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  \"in\": false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = 0;\nTransition.EXITED = 1;\nTransition.ENTERING = 2;\nTransition.ENTERED = 3;\nTransition.EXITING = 4;\nexport default Transition;","import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/class/addClass';\nimport removeOneClass from 'dom-helpers/class/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](http://www.nganimate.org/) library, you should use it if you're\n * using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**.\n */\n\n\nvar CSSTransition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (node, appearing) {\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(node, appearing);\n      }\n    };\n\n    _this.onEntering = function (node, appearing) {\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(node, appearing);\n      }\n    };\n\n    _this.onEntered = function (node, appearing) {\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(node, appearing);\n      }\n    };\n\n    _this.onExit = function (node) {\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(node);\n      }\n    };\n\n    _this.onExiting = function (node) {\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(node);\n      }\n    };\n\n    _this.onExited = function (node) {\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(node);\n      }\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    if (type === 'appear' && phase === 'done') {\n      className += \" \" + this.getClassNames('enter').doneClassName;\n    } // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    this.appliedClasses[type][phase] = className;\n\n    _addClass(node, className);\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it enters, exits or\n   * has finished the transition. A single name can be provided and it will be\n   * suffixed for each stage: e.g.\n   *\n   * `classNames=\"fade\"` applies `fade-enter`, `fade-enter-active`,\n   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,\n   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.\n   *\n   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.\n   * This allows you to define different behavior for when appearing is done and\n   * when regular entering is done, using selectors like\n   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an\n   * epic entrance animation when element first appears in the DOM using\n   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   * simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.object.create\";\nimport { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      \"in\": true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = key in prevChildMapping;\n    var hasNext = key in nextChildMapping;\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props[\"in\"]; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        \"in\": true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        \"in\": false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        \"in\": prevChild.props[\"in\"],\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es7.object.values\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n  /**\n   * The `<TransitionGroup>` component manages a set of transition components\n   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n   * components, `<TransitionGroup>` is a state machine for managing the mounting\n   * and unmounting of components over time.\n   *\n   * Consider the example below. As items are removed or added to the TodoList the\n   * `in` prop is toggled automatically by the `<TransitionGroup>`.\n   *\n   * Note that `<TransitionGroup>`  does not define any animation behavior!\n   * Exactly _how_ a list item animates is up to the individual transition\n   * component. This means you can mix and match animations across different list\n   * items.\n   */\n\n};\n\nvar TransitionGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  };\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;"],"sourceRoot":""}